import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.2'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.bmuschko.docker-remote-api' version '9.4.0'
	id 'com.bmuschko.docker-java-application' version '9.4.0'
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2024.0.0")

	DEFAULT_PROFILE = "local"
	SERVICE_VERSION = new Date().format("yyyyMMddHHmmss", TimeZone.getTimeZone("Asia/Seoul"))
	SERVICE_NAME = 'config-server'

	DEFAULT_DOCKER_HUB_REPOSITORY = 'rnrl1215/p8labs-config'

	def isDepoly = project.hasProperty('isDepoly')
	profile = isDepoly ? project.property("profile") : "${DEFAULT_PROFILE}"
	serviceVersion = isDepoly ? project.property("serviceVersion") : "${SERVICE_VERSION}"
	serviceName = isDepoly ? project.property('serviceName') : "${SERVICE_NAME}"

	dockerRepository = isDepoly ? project.property('dockerRepository') : "${DEFAULT_DOCKER_HUB_REPOSITORY}"
	dockerUser = isDepoly ? project.property('dockerUser') : ""
	dockerPasswd = isDepoly ? project.property('dockerPasswd') : ""

	SERVICE_NAME = serviceName
	SERIVCE_VERSION = serviceVersion
	PROFILE = profile

	DOCKER_REPOSITORY = dockerRepository
	DOCKER_USER = dockerUser
	DOCKER_PASSWORD = dockerPasswd


   	println "[ BUILD INFO ] PROFILE : ${PROFILE}"
	println "[ BUILD INFO ] Service VERSION : ${SERIVCE_VERSION}"
	println "[ BUILD INFO ] Service NAME : ${SERVICE_NAME}"
}


group = 'com.p8labs'
version = "${SERIVCE_VERSION}"


// 실행 가능한 JAR 생성 설정
bootJar {
	enabled = true
	archiveBaseName = "${SERVICE_NAME}-${PROFILE}"

	doLast {
		copy {
			def jarFile = tasks.bootJar.archiveFile.get().asFile
			def jarFilePath = jarFile.path

			archiveBaseName = "${SERVICE_NAME}" + "${PROFILE}"
			from jarFilePath
			into getRootDir().path + "/build/docker/"
		}
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.cloud:spring-cloud-config-server'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

apply from: 'docker.gradle'

tasks.create('createDockerfile', Dockerfile) {
	def jarFile = tasks.bootJar.archiveFile.get().asFile
	def path = jarFile.getParent();
	def jarFileFulPath =  "/"+ "${SERVICE_NAME}"+"-"+"${PROFILE}"+"-"+"${SERIVCE_VERSION}"+'.jar';
	println "[ CRATE DOCKER FILE INFO ] PATH : ${path}"
	println "[ CRATE DOCKER FILE INFO ] PROFILE : ${PROFILE}"
	println "[ CRATE DOCKER FILE INFO ] SERVICE NAME : ${SERVICE_NAME}"
	println "[ CRATE DOCKER FILE INFO ] SERVICE_VERSION : ${SERIVCE_VERSION}"
	println "[ CRATE DOCKER FILE INFO ] JAR PATH : ${jarFileFulPath}"

	from('openjdk:17-jdk-slim')
	arg("JAR_FILE")

	copyFile(jarFileFulPath, '/'+"${SERVICE_NAME}"+'.jar')
	runCommand("mkdir -p target/dependency && (cd target/dependency; jar -xf /"+"${SERVICE_NAME}"+".jar"+")")
	entryPoint("java", "-jar", "/"+"${SERVICE_NAME}"+".jar")
	exposePort(8071)
}


task buildImage(type: DockerBuildImage) {
	dependsOn createDockerfile
	images.add("${DOCKER_REPOSITORY}"+"-"+"${PROFILE}"+":"+"${SERIVCE_VERSION}")
}

task pushDocker(type: DockerPushImage) {
	dependsOn buildImage  // Docker 이미지 빌드 후 푸시
	images.add("${DOCKER_REPOSITORY}"+"-"+"${PROFILE}"+":"+"${SERIVCE_VERSION}")
	registryCredentials {
		username = "${DOCKER_USER}"
		password = "${DOCKER_PASSWORD}"
	}
}