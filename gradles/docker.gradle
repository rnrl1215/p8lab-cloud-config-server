import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

import com.bmuschko.gradle.docker.tasks.image.*

buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:9.4.0'
    }
}


tasks.create('createDockerfile', Dockerfile) {
    def jarFile = tasks.bootJar.archiveFile.get().asFile
    def path = jarFile.getParent();
    def jarFileFulPath = path + "/"+ "${SERVICE_NAME}"+"-"+"${PROFILE}"+"-"+"${SERIVCE_VERSION}"+'.jar';
    println "[ CRATE DOCKER FILE INFO ] PATH : ${path}"
    println "[ CRATE DOCKER FILE INFO ] SERVICE NAME : ${SERVICE_NAME}"
    println "[ CRATE DOCKER FILE INFO ] PROFILE : ${PROFILE}"
    println "[ CRATE DOCKER FILE INFO ] SERVICE_VERSION : ${SERIVCE_VERSION}"
    println "[ CRATE DOCKER FILE INFO ] PULL PATH : ${jarFileFulPath}"

    from('openjdk:17-jdk-slim')
    arg("JAR_FILE")

    copyFile(jarFileFulPath, '/'+"${SERVICE_NAME}"+'.jar')
    runCommand("mkdir -p target/dependency && (cd target/dependency; jar -xf /config-app.jar)")
    entryPoint("java", "-jar", "/"+"${SERVICE_NAME}"+".jar")
    exposePort(8071)
}

task buildImage(type: DockerBuildImage) {
    dependsOn createDockerfile
    images.add("${DOCKER_REPOSITORY}"+"/"+"${SERVICE_NAME}"+":"+"${SERIVCE_VERSION}")
}

task pushDocker(type: DockerPushImage) {
    dependsOn buildImage  // Docker 이미지 빌드 후 푸시
    images.add("${DOCKER_REPOSITORY}"+"/"+"${SERVICE_NAME}"+":"+"${SERIVCE_VERSION}")
    registryCredentials {
        username = "${DOCKER_USER}"
        password = "${DOCKER_PASSWORD}"
    }
}